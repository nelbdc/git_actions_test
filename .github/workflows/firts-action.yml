# todo se puede ver la en documentacion de git

name: firts-worflow
# on: push
# # se puede configurar varios on de la siguiente forma [push,workflow_dispatch,...]
on:
  pull_request:
    types:
      - opened
    branches:
      - main
      - "dev-*" # dev-new dev-this-is-new -> como se utilizan los slashes y los asteriscos
      - "feat/**" # feat/new feat/this/new -> nos permite realizar mas de un slash en la ruta de la rama
  workflow_dispatch:
  push:
    branches:
      - main
      - "dev-*" # dev-new dev-this-is-new -> como se utilizan los slashes y los asteriscos
      - "feat/**" # feat/new feat/this/new -> nos permite realizar mas de un slash en la ruta de la rama
    # paths-ignore: #no hara los actions si vienen de alguna de estas rutas
    #   - '.github/workflows/*'
# otra forma de hacer los on - es mas compleja pero permite especificar diferentes tipos mira el ejemplo de arriba
jobs:
  fibonacci:
    runs-on: ubuntu-latest #obligatorio para todos los jobs que se creen
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: pip install -r ./requirements.txt
      - name: Run Test
        run: pytest ./fibonacci
  django-test:
    runs-on: ubuntu-latest
    needs: fibonacci
    outputs:
      scrip-file: ${{steps.publish.outputs.scrip-file}} #sera el nombre del archivo al cual se le hara el output
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: pip install -r ./requirements.txt
      - name: Run Test
        run: pytest ./api
      - name: Publish filename
        id: publish
        run: find ./api/coronavstech/companies/*.txt -type f -execdir echo 'scrip-file={}' >> $GITHUB_OUTPUT ';' #comando para publicar el archivo que queremos
        # run: find ./api/coronavstech/companies/*.txt -type f -execdir echo '::set-output name=scrip-file={}' ';' #comando para publicar el archivo que queremos se puede hacer de esta forma tambien esta esta en deshuso
        # es un comando de linux ya que estamos corriendo en una maquina de linux
      - name: Uploads Artifact
        uses: actions/upload-artifact@v3 # Averiguar mas sobre artifact
        with:
          name: api-files
          path: | #para poder agarrar mas de una ruta
            api/coronavstech

  deploy:
    needs: [fibonacci, django-test] # para decirle que necesita que termine primero este antes de seguir la ejecucion de este
    #para decirle que necesita de varios jobs se hace [test,test.,..]
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
      - name: Install Dependencies
        run: echo "instalando dependencia"
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: api-files
      - name: Output content
        run: ls
      - name: Output filename
        run: echo "${{ needs.django-test.outputs.scrip-file }}"
      - name: Deploying
        run: echo "deploy"
